import OpenAI from "openai";
import { WeeklyPlan, WorkoutHistory, AISuggestion } from "@/types";

const openai = new OpenAI({
  apiKey: import.meta.env.VITE_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true, // Note: In production, use a backend proxy
});

export async function generateWeightSuggestions(
  newPlan: WeeklyPlan,
  workoutHistory: WorkoutHistory[]
): Promise<Map<string, AISuggestion>> {
  const suggestions = new Map<string, AISuggestion>();

  // Format workout history for the prompt
  const historyText = formatWorkoutHistory(workoutHistory);
  const newPlanText = formatNewPlan(newPlan);

  const prompt = `–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ —Ñ—ñ—Ç–Ω–µ—Å—É —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä –∑ –±–∞–≥–∞—Ç–æ—Ä—ñ—á–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –≤–∞–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∂–Ω—è.

üìä –Ü–°–¢–û–†–Ü–Ø –¢–†–ï–ù–£–í–ê–ù–¨ (–æ—Å—Ç–∞–Ω–Ω—ñ 1-2 –º—ñ—Å—è—Ü—ñ):
${historyText}

üéØ –ù–û–í–ò–ô –ü–õ–ê–ù –¢–†–ï–ù–£–í–ê–ù–¨:
${newPlanText}

–ó–ê–í–î–ê–ù–ù–Ø:
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—É –≤–∞–≥—É –¥–ª—è –ö–û–ñ–ù–û–á –≤–ø—Ä–∞–≤–∏ –≤ –Ω–æ–≤–æ–º—É –ø–ª–∞–Ω—ñ.

–ü–†–ò–ù–¶–ò–ü–ò –ê–ù–ê–õ–Ü–ó–£:
1. **–ü—Ä–æ–≥—Ä–µ—Å–∏–≤–Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è**: –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞–±—ñ–ª—å–Ω–æ –≤–∏–∫–æ–Ω—É—î –≤–ø—Ä–∞–≤—É –∑ –ø–µ–≤–Ω–æ—é –≤–∞–≥–æ—é, –∑–±—ñ–ª—å—à—É–π –≤–∞–≥—É –Ω–∞:
   - –ë–∞–∑–æ–≤—ñ –≤–ø—Ä–∞–≤–∏ (–ø—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è, —Å—Ç–∞–Ω–æ–≤–∞—è, –∂–∏–º): +2.5-5 –∫–≥
   - –î–æ–ø–æ–º—ñ–∂–Ω—ñ –≤–ø—Ä–∞–≤–∏ (–∂–∏–º –Ω–æ–≥–∞–º–∏, —Ç—è–≥–∞): +2.5 –∫–≥
   - –Ü–∑–æ–ª—è—Ü—ñ—è (—Ä–æ–∑–≤–µ–¥–µ–Ω–Ω—è, –∑–≥–∏–Ω–∞–Ω–Ω—è): +1-2.5 –∫–≥
   - –í–ø—Ä–∞–≤–∏ –∑ –≤–ª–∞—Å–Ω–æ—é –≤–∞–≥–æ—é/–±–µ–∑ –æ–±—Ç—è–∂–µ–Ω–Ω—è: 0 –∫–≥

2. **–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É**: 
   - –Ø–∫—â–æ –≤ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 3-4 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö –≤–∞–≥–∞ —Ä–æ—Å–ª–∞ ‚Üí –ø—Ä–æ–¥–æ–≤–∂—É–π –ø—Ä–æ–≥—Ä–µ—Å—ñ—é
   - –Ø–∫—â–æ –≤–∞–≥–∞ —Å—Ç–∞–≥–Ω—É–≤–∞–ª–∞ ‚Üí –∑—Ä–æ–±–∏ –Ω–µ–≤–µ–ª–∏–∫–∏–π –∫—Ä–æ–∫ –≤–ø–µ—Ä–µ–¥
   - –Ø–∫—â–æ  –ø–∞–¥–∞—î ‚Üí –∑–∞–ª–∏—à –≤–∞–≥—É –∞–±–æ —Ç—Ä–æ—Ö–∏ –∑–º–µ–Ω—à

3. **–ù–æ–≤—ñ –≤–ø—Ä–∞–≤–∏**: 
   - –Ø–∫—â–æ –≤–ø—Ä–∞–≤–∏ –Ω–µ–º–∞—î –≤ —ñ—Å—Ç–æ—Ä—ñ—ó, –∞–ª–µ —î —Å—Ö–æ–∂–∞ ‚Üí –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –±–ª–∏–∑—å–∫—É –≤–∞–≥—É
   - –Ø–∫—â–æ –≤–ø—Ä–∞–≤–∞ –∑–æ–≤—Å—ñ–º –Ω–æ–≤–∞ ‚Üí –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É –≤–∞–≥—É (–∫—Ä–∞—â–µ –º–µ–Ω—à–µ, –Ω—ñ–∂ –±—ñ–ª—å—à–µ)

4. **–í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –æ–±'—î–º—É**:
   - –ë—ñ–ª—å—à–µ –ø—ñ–¥—Ö–æ–¥—ñ–≤ ‚Üí –º–µ–Ω—à–∞ –≤–∞–≥–∞
   - –ë—ñ–ª—å—à–µ  ‚Üí –º–µ–Ω—à–∞ –≤–∞–≥–∞
   - –°—É–ø–µ—Ä—Å–µ—Ç–∏/–¥—Ä–æ–ø—Å–µ—Ç–∏ ‚Üí –º–µ–Ω—à–∞ –≤–∞–≥–∞

5. **–ë–µ–∑–ø–µ–∫–∞**: –ö—Ä–∞—â–µ –ø—Ä–æ–≥—Ä–µ—Å—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–ª—å–Ω–æ, –Ω—ñ–∂ —Ä–∏–∑–∏–∫—É–≤–∞—Ç–∏ —Ç—Ä–∞–≤–º–æ—é.

–í–ê–ñ–õ–ò–í–û:
- –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ
- –î–ª—è –∫–æ–∂–Ω–æ—ó –≤–ø—Ä–∞–≤–∏ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –º–∞—Å–∏–≤ –≤–∞–≥ (–ø–æ –æ–¥–Ω—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É)
- –Ø–∫—â–æ –≤–ø—Ä–∞–≤–∞ –±–µ–∑ –æ–±—Ç—è–∂–µ–Ω–Ω—è (–ø–ª–∞–≤–∞–Ω–Ω—è, –≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è –≤—ñ–¥ –ø—ñ–¥–ª–æ–≥–∏ —Ç–æ—â–æ) ‚Üí 0 –∫–≥ –¥–ª—è –≤—Å—ñ—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤
- –ü–æ—è—Å–Ω–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–º –∞–ª–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º (1-2 —Ä–µ—á–µ–Ω–Ω—è)

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü (JSON):
{
  "suggestions": [
    {
      "exerciseName": "–¢–æ—á–Ω–∞ –Ω–∞–∑–≤–∞ –≤–ø—Ä–∞–≤–∏ –∑ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É",
      "suggestedWeights": [–≤–∞–≥–∞ –ø—ñ–¥—Ö–æ–¥—É 1, –≤–∞–≥–∞ –ø—ñ–¥—Ö–æ–¥—É 2, –≤–∞–≥–∞ –ø—ñ–¥—Ö–æ–¥—É 3, ...],
      "reasoning": "–ö–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è: —á–æ–º—É —Ü—è –≤–∞–≥–∞, –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–æ–≥–æ (–æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏, –ø—Ä–æ–≥—Ä–µ—Å—ñ—è, –Ω–æ–≤–∞ –≤–ø—Ä–∞–≤–∞ —Ç–æ—â–æ)"
    }
  ]
}

–ü—Ä–∏–∫–ª–∞–¥:
{
  "suggestions": [
    {
      "exerciseName": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑—ñ —à—Ç–∞–Ω–≥–æ—é",
      "suggestedWeights": [102.5, 102.5, 102.5],
      "reasoning": "–û—Å—Ç–∞–Ω–Ω—è –≤–∞–≥–∞ 100 –∫–≥ –≤–∏–∫–æ–Ω–∞–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω–æ. –î–æ–¥–∞—î–º–æ +2.5 –∫–≥ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—ñ—ó."
    },
    {
      "exerciseName": "–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è –≤—ñ–¥ –ø—ñ–¥–ª–æ–≥–∏",
      "suggestedWeights": [0, 0, 0],
      "reasoning": "–í–ø—Ä–∞–≤–∞ –∑ –≤–ª–∞—Å–Ω–æ—é –≤–∞–≥–æ—é, –æ–±—Ç—è–∂–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ."
    }
  ]
}`;

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content:
            "–¢–∏ - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä –∑ —Ñ—ñ—Ç–Ω–µ—Å—É. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∑–∞–≤–∂–¥–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é —Ç–∞ —Ç—ñ–ª—å–∫–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ.",
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      temperature: 0.7,
      response_format: { type: "json_object" },
    });

    const content = response.choices[0]?.message?.content;
    if (!content) {
      throw new Error("No response from OpenAI");
    }

    const result = JSON.parse(content);

    // Convert to Map of AISuggestions
    if (result.suggestions && Array.isArray(result.suggestions)) {
      result.suggestions.forEach((suggestion: any) => {
        const aiSuggestion: AISuggestion = {
          id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          userId: newPlan.userId,
          weekPlanId: newPlan.id,
          exerciseName: suggestion.exerciseName,
          suggestedWeights: suggestion.suggestedWeights || [],
          reasoning: suggestion.reasoning,
          createdAt: new Date(),
        };

        suggestions.set(suggestion.exerciseName, aiSuggestion);
      });
    }
  } catch (error) {
    console.error("Error generating AI suggestions:", error);
    throw error;
  }

  return suggestions;
}

function formatWorkoutHistory(history: WorkoutHistory[]): string {
  if (history.length === 0) {
    return "–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –≤—ñ–¥—Å—É—Ç–Ω—è. –¶–µ –ø–µ—Ä—à–∏–π –ø–ª–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.";
  }

  // Get workouts from last 2 months
  const twoMonthsAgo = new Date();
  twoMonthsAgo.setMonth(twoMonthsAgo.getMonth() - 2);

  const recentHistory = history.filter(
    (workout) => workout.date >= twoMonthsAgo
  );

  // Sort by date, most recent first
  const sortedHistory = [...recentHistory].sort(
    (a, b) => b.date.getTime() - a.date.getTime()
  );

  if (sortedHistory.length === 0) {
    return "–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 2 –º—ñ—Å—è—Ü—ñ –≤—ñ–¥—Å—É—Ç–Ω—è. –¶–µ –ø–µ—Ä—à–∏–π –ø–ª–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥.";
  }

  let formatted = `–í—Å—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 2 –º—ñ—Å—è—Ü—ñ: ${sortedHistory.length}\n\n`;

  // Group exercises by name to show progression
  const exerciseHistory: Map<
    string,
    Array<{ date: Date; sets: any[] }>
  > = new Map();

  sortedHistory.forEach((workout) => {
    workout.exercises.forEach((ex) => {
      if (!exerciseHistory.has(ex.name)) {
        exerciseHistory.set(ex.name, []);
      }
      exerciseHistory.get(ex.name)!.push({
        date: workout.date,
        sets: ex.sets,
      });
    });
  });

  // Show detailed history per exercise
  formatted += "üìã –Ü–°–¢–û–†–Ü–Ø –ü–û –í–ü–†–ê–í–ê–•:\n\n";
  exerciseHistory.forEach((records, exerciseName) => {
    formatted += `‚ñ∏ ${exerciseName}:\n`;
    records.slice(0, 5).forEach((record) => {
      // Last 5 occurrences
      formatted += `  ${record.date.toLocaleDateString("uk-UA")}: `;
      const weights = record.sets
        .map((s) => `${s.weight}–∫–≥√ó${s.reps}`)
        .join(", ");
      formatted += weights + "\n";
    });
    formatted += "\n";
  });

  // Show recent workouts chronologically
  formatted += "\nüìÖ –û–°–¢–ê–ù–ù–Ü –¢–†–ï–ù–£–í–ê–ù–ù–Ø:\n";
  sortedHistory.slice(0, 10).forEach((workout) => {
    formatted += `\n–î–∞—Ç–∞: ${workout.date.toLocaleDateString("uk-UA")} (–î–µ–Ω—å ${
      workout.dayNumber
    }):\n`;
    workout.exercises.forEach((ex) => {
      formatted += `  - ${ex.name}: `;
      const sets = ex.sets.map((s) => `${s.weight}–∫–≥√ó${s.reps}`).join(", ");
      formatted += sets + "\n";
    });
  });

  return formatted;
}

function formatNewPlan(plan: WeeklyPlan): string {
  let formatted = `–¢–∏–∂–¥–µ–Ω—å: ${plan.weekStartDate.toLocaleDateString(
    "uk-UA"
  )} - ${plan.weekEndDate.toLocaleDateString("uk-UA")}\n\n`;

  plan.days.forEach((day) => {
    formatted += `–î–ï–ù–¨ ${day.day}:\n`;
    day.exercises.forEach((ex, idx) => {
      formatted += `${idx + 1}. ${ex.name}\n`;
      formatted += `   ${ex.sets} –ø—ñ–¥—Ö–æ–¥–∏ –ø–æ ${ex.reps} \n`;
      if (ex.type && ex.type !== "normal") {
        formatted += `   –¢–∏–ø: ${
          ex.type === "superset" ? "–°—É–ø–µ—Ä—Å–µ—Ç" : "–î—Ä–æ–ø—Å–µ—Ç"
        }\n`;
      }
    });
    formatted += "\n";
  });

  return formatted;
}
