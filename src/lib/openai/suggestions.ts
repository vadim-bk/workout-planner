import OpenAI from 'openai';
import type { WeeklyPlan, WorkoutHistory, AISuggestion } from '@/types';

const openai = new OpenAI({
  apiKey: import.meta.env.VITE_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true, // Note: In production, use a backend proxy
});

export async function generateWeightSuggestions(
  newPlan: WeeklyPlan,
  workoutHistory: WorkoutHistory[]
): Promise<Map<string, AISuggestion>> {
  const suggestions = new Map<string, AISuggestion>();

  // Format workout history for the prompt
  const historyText = formatWorkoutHistory(workoutHistory);
  const newPlanText = formatNewPlan(newPlan);

  const prompt = `–¢–∏ - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä –∑ —Ñ—ñ—Ç–Ω–µ—Å—É –∑ 15-—Ä—ñ—á–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –≤–∞–≥–∏ —Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∂–Ω—è.

üìä –Ü–°–¢–û–†–Ü–Ø –¢–†–ï–ù–£–í–ê–ù–¨ (–æ—Å—Ç–∞–Ω–Ω—ñ 1-2 –º—ñ—Å—è—Ü—ñ):
${historyText}

üéØ –ù–û–í–ò–ô –ü–õ–ê–ù –¢–†–ï–ù–£–í–ê–ù–¨:
${newPlanText}

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–Ü –ü–†–ò–ù–¶–ò–ü–ò:

1. **–ü–†–ê–í–ò–õ–¨–ù–Ü –ü–û–í–¢–û–†–ï–ù–ù–Ø**: 
   - –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø—Ä–æ–≥—Ä–µ—Å–∏–≤–Ω–µ –∑–º–µ–Ω—à–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–µ–Ω—å:
     * 2 –ø—ñ–¥—Ö–æ–¥–∏: 15, 12
     * 3 –ø—ñ–¥—Ö–æ–¥–∏: 15, 12, 10
     * 4+ –ø—ñ–¥—Ö–æ–¥—ñ–≤: 15, 12, 10, 10
   - –ù–Ü–ö–û–õ–ò –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –æ–¥–Ω–∞–∫–æ–≤—ñ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤!

2. **–ü–†–û–ì–†–ï–°–ò–í–ù–ï –ù–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø**:
   - –ö–æ–∂–µ–Ω –ø—ñ–¥—Ö—ñ–¥ –º–∞—î –†–Ü–ó–ù–£ –≤–∞–≥—É: –∑–±—ñ–ª—å—à—É–π –≤–∞–≥—É –∑ –∫–æ–∂–Ω–∏–º –ø—ñ–¥—Ö–æ–¥–æ–º
   - –ü—Ä–∏–∫–ª–∞–¥: 15 –∫–≥ √ó 15, 17.5 –∫–≥ √ó 12, 20 –∫–≥ √ó 10
   - –ù–Ü–ö–û–õ–ò –Ω–µ —Å—Ç–∞–≤ –æ–¥–Ω–∞–∫–æ–≤—É –≤–∞–≥—É –¥–ª—è –≤—Å—ñ—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤!

3. **–ê–ù–ê–õ–Ü–ó –Ü–°–¢–û–†–Ü–á**:
   - –ó–Ω–∞–π–¥–∏ –æ—Å—Ç–∞–Ω–Ω—é –≤–∞–≥—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –≤–ø—Ä–∞–≤–∏
   - –ó–±—ñ–ª—å—à–∏ —ó—ó –Ω–∞ 2.5-5 –∫–≥ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É
   - –î–æ–¥–∞–≤–∞–π —â–µ 2.5 –∫–≥ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É

4. **–°–•–û–ñ–Ü –í–ü–†–ê–í–ò** (—è–∫—â–æ —Ç–æ—á–Ω–æ—ó –≤–ø—Ä–∞–≤–∏ –Ω–µ–º–∞—î):
   - "–¢—è–≥–∞ –æ–¥–Ω—ñ—î—ó –≥–∞–Ω—Ç–µ–ª—ñ –ø—ñ–¥ –Ω–∞—Ö–∏–ª–æ–º" ‚âà "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª—ñ –≤ –Ω–∞—Ö–∏–ª—ñ" 
   - "–†–æ–∑–≥–∏–Ω–∞–Ω–Ω—è –Ω—ñ–≥ —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ" ‚âà "–†–æ–∑–≥–∏–Ω–∞–Ω–Ω—è –Ω—ñ–≥ —Å–∏–¥—è—á–∏ —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ"
   - "–ó–≥–∏–Ω–∞–Ω–Ω—è —Ä—É–∫ –∑ –≥–∞–Ω—Ç–µ–ª—è–º–∏" ‚âà "–ú–æ–ª–æ—Ç–∫–∏" –∞–±–æ "–ó–≥–∏–Ω–∞–Ω–Ω—è —Ä—É–∫ –∑—ñ —à—Ç–∞–Ω–≥–æ—é"
   - "–í—ñ–¥–≤–µ–¥–µ–Ω–Ω—è –æ–¥–Ω—ñ—î—é —Ä—É–∫–æ—é" ‚âà "–ú–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏ –≤ —Å—Ç–æ—Ä–æ–Ω–∏"
   - "–†–æ–∑–≥–∏–Ω–∞–Ω–Ω—è –Ω–∞ —Ç—Ä–∏—Ü–µ–ø—Å" ‚âà "–§—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π –∂–∏–º" –∞–±–æ "–ñ–∏–º –ª–µ–∂–∞—á–∏ –≤—É–∑—å–∫–∏–º —Ö–≤–∞—Ç–æ–º"

5. **–í–ü–†–ê–í–ò –ó –í–õ–ê–°–ù–û–Æ –í–ê–ì–û–Æ**:
   - –ë—Ä—É—Å–∏, –ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è, –≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è = 0 –∫–≥ –¥–ª—è –≤—Å—ñ—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤
   - –ê–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –≤—Å–µ –æ–¥–Ω–æ: 15, 12, 10

6. **–°–£–ü–ï–†–°–ï–¢–ò/–î–†–û–ü–°–ï–¢–ò**:
   - –ó–º–µ–Ω—à–∏ –≤–∞–≥—É –Ω–∞ 10-15% –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –∑–≤–∏—á–∞–π–Ω–∏–º–∏ –≤–ø—Ä–∞–≤–∞–º–∏
   - –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è: 15, 12, 10

–ü–†–ò–ö–õ–ê–î –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –†–ï–ó–£–õ–¨–¢–ê–¢–£:
- –¢—è–≥–∞ –æ–¥–Ω—ñ—î—ó –≥–∞–Ω—Ç–µ–ª—ñ –ø—ñ–¥ –Ω–∞—Ö–∏–ª–æ–º (3 –ø—ñ–¥—Ö–æ–¥–∏): [15, 17.5, 20] –∫–≥, [15, 12, 10] –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
- –†–æ–∑–≥–∏–Ω–∞–Ω–Ω—è –Ω—ñ–≥ —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ (3 –ø—ñ–¥—Ö–æ–¥–∏): [27, 32, 34] –∫–≥, [15, 12, 10] –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
- –ó–≥–∏–Ω–∞–Ω–Ω—è —Ä—É–∫ –∑ –≥–∞–Ω—Ç–µ–ª—è–º–∏ (2 –ø—ñ–¥—Ö–æ–¥–∏): [8, 9] –∫–≥, [15, 12] –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
- –ë—Ä—É—Å–∏ (3 –ø—ñ–¥—Ö–æ–¥–∏): [0, 0, 0] –∫–≥, [15, 12, 10] –ø–æ–≤—Ç–æ—Ä–µ–Ω—å (–≤–ø—Ä–∞–≤–∞ –∑ –≤–ª–∞—Å–Ω–æ—é –≤–∞–≥–æ—é)

–í–ê–ñ–õ–ò–í–û:
- –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ
- –í–°–Ü –≤–∞–≥–∏ —Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –º–∞—é—Ç—å –±—É—Ç–∏ —Ä—ñ–∑–Ω–∏–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É
- –ü–æ—è—Å–Ω–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–º –∞–ª–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü (JSON):
{
  "suggestions": [
    {
      "exerciseName": "–¢–æ—á–Ω–∞ –Ω–∞–∑–≤–∞ –≤–ø—Ä–∞–≤–∏ –∑ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É",
      "suggestedWeights": [–≤–∞–≥–∞_–ø—ñ–¥—Ö–æ–¥—É_1, –≤–∞–≥–∞_–ø—ñ–¥—Ö–æ–¥—É_2, –≤–∞–≥–∞_–ø—ñ–¥—Ö–æ–¥—É_3],
      "suggestedReps": [15, 12, 10],
      "reasoning": "–ö–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –∞–±–æ —Å—Ö–æ–∂–∏—Ö –≤–ø—Ä–∞–≤"
    }
  ]
}

–í–ê–ñ–õ–ò–í–û: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É suggestedWeights —Ç–∞ suggestedReps –º–∞—î —Ç–æ—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—ñ–¥—Ö–æ–¥—ñ–≤ —É –ø–ª–∞–Ω—ñ!`;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: '–¢–∏ - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä –∑ —Ñ—ñ—Ç–Ω–µ—Å—É. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∑–∞–≤–∂–¥–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é —Ç–∞ —Ç—ñ–ª—å–∫–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.7,
      response_format: { type: 'json_object' },
    });

    const content = response.choices[0]?.message?.content;
    if (!content) {
      throw new Error('No response from OpenAI');
    }

    let result;
    try {
      result = JSON.parse(content);
    } catch (parseError) {
      console.error('Failed to parse OpenAI response:', parseError);
      console.error('Raw response:', content);
      throw new Error('Invalid JSON response from OpenAI');
    }

    // Convert to Map of AISuggestions
    if (result.suggestions && Array.isArray(result.suggestions)) {
      result.suggestions.forEach((suggestion: any) => {
        // Validate suggestion data
        if (suggestion.exerciseName && suggestion.suggestedWeights && suggestion.suggestedReps) {
          const aiSuggestion: AISuggestion = {
            id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            userId: newPlan.userId,
            weekPlanId: newPlan.id,
            exerciseName: suggestion.exerciseName,
            suggestedWeights: suggestion.suggestedWeights || [],
            suggestedReps: suggestion.suggestedReps || [],
            reasoning: suggestion.reasoning || 'AI –ø—ñ–¥–∫–∞–∑–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω—å',
            createdAt: new Date(),
          };

          suggestions.set(suggestion.exerciseName, aiSuggestion);
        }
      });
    }
  } catch (error) {
    console.error('Error generating AI suggestions:', error);
    throw error;
  }

  return suggestions;
}

function formatWorkoutHistory(history: WorkoutHistory[]): string {
  if (history.length === 0) {
    return '–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –≤—ñ–¥—Å—É—Ç–Ω—è. –¶–µ –ø–µ—Ä—à–∏–π –ø–ª–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.';
  }

  // Get workouts from last 2 months
  const twoMonthsAgo = new Date();
  twoMonthsAgo.setMonth(twoMonthsAgo.getMonth() - 2);

  const recentHistory = history.filter((workout) => workout.date >= twoMonthsAgo);

  // Sort by date, most recent first
  const sortedHistory = [...recentHistory].sort((a, b) => b.date.getTime() - a.date.getTime());

  if (sortedHistory.length === 0) {
    return '–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 2 –º—ñ—Å—è—Ü—ñ –≤—ñ–¥—Å—É—Ç–Ω—è. –¶–µ –ø–µ—Ä—à–∏–π –ø–ª–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥.';
  }

  let formatted = `–í—Å—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 2 –º—ñ—Å—è—Ü—ñ: ${sortedHistory.length}\n\n`;

  // Group exercises by name to show progression
  const exerciseHistory: Map<string, Array<{ date: Date; sets: any[] }>> = new Map();

  sortedHistory.forEach((workout) => {
    workout.exercises.forEach((ex) => {
      if (!exerciseHistory.has(ex.name)) {
        exerciseHistory.set(ex.name, []);
      }
      exerciseHistory.get(ex.name)!.push({
        date: workout.date,
        sets: ex.sets,
      });
    });
  });

  // Show detailed history per exercise
  formatted += 'üìã –Ü–°–¢–û–†–Ü–Ø –ü–û –í–ü–†–ê–í–ê–• (–æ—Å—Ç–∞–Ω–Ω—ñ 5 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å):\n\n';
  exerciseHistory.forEach((records, exerciseName) => {
    formatted += `‚ñ∏ ${exerciseName}:\n`;
    records.slice(0, 5).forEach((record, idx) => {
      // Last 5 occurrences
      const isLatest = idx === 0 ? ' (–û–°–¢–ê–ù–ù–Ñ)' : '';
      formatted += `  ${record.date.toLocaleDateString('uk-UA')}${isLatest}: `;
      const weights = record.sets.map((s) => `${s.weight}–∫–≥√ó${s.reps}`).join(', ');
      formatted += weights + '\n';
    });

    // Add progression analysis
    if (records.length > 1) {
      const latest = records[0];
      const previous = records[1];
      const latestMaxWeight = Math.max(...latest.sets.map((s) => s.weight));
      const previousMaxWeight = Math.max(...previous.sets.map((s) => s.weight));

      if (latestMaxWeight > previousMaxWeight) {
        formatted += `  üìà –ü–†–û–ì–†–ï–°–Ü–Ø: +${(latestMaxWeight - previousMaxWeight).toFixed(1)}–∫–≥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–º —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º\n`;
      } else if (latestMaxWeight === previousMaxWeight) {
        formatted += `  üìä –°–¢–ê–ë–Ü–õ–¨–ù–û: —Ç–∞ —Å–∞–º–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞\n`;
      } else {
        formatted += `  üìâ –ó–ú–ï–ù–®–ï–ù–ù–Ø: -${(previousMaxWeight - latestMaxWeight).toFixed(1)}–∫–≥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–º —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º\n`;
      }
    }
    formatted += '\n';
  });

  // Show recent workouts chronologically
  formatted += '\nüìÖ –û–°–¢–ê–ù–ù–Ü –¢–†–ï–ù–£–í–ê–ù–ù–Ø:\n';
  sortedHistory.slice(0, 10).forEach((workout) => {
    formatted += `\n–î–∞—Ç–∞: ${workout.date.toLocaleDateString('uk-UA')} (–î–µ–Ω—å ${workout.dayNumber}):\n`;
    workout.exercises.forEach((ex) => {
      formatted += `  - ${ex.name}: `;
      const sets = ex.sets.map((s) => `${s.weight}–∫–≥√ó${s.reps}`).join(', ');
      formatted += sets + '\n';
    });
  });

  return formatted;
}

function formatNewPlan(plan: WeeklyPlan): string {
  let formatted = `–¢–∏–∂–¥–µ–Ω—å: ${plan.weekStartDate.toLocaleDateString(
    'uk-UA'
  )} - ${plan.weekEndDate.toLocaleDateString('uk-UA')}\n\n`;

  plan.days.forEach((day) => {
    formatted += `–î–ï–ù–¨ ${day.day}:\n`;
    day.exercises.forEach((ex, idx) => {
      formatted += `${idx + 1}. ${ex.name}\n`;
      formatted += `   ${ex.sets} –ø—ñ–¥—Ö–æ–¥–∏ –ø–æ ${ex.reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω—å\n`;
      if (ex.type && ex.type !== 'normal') {
        formatted += `   –¢–∏–ø: ${ex.type === 'superset' ? '–°—É–ø–µ—Ä—Å–µ—Ç' : '–î—Ä–æ–ø—Å–µ—Ç'}\n`;
      }
      formatted += `   –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ ${ex.sets} —Ä—ñ–∑–Ω–∏—Ö –≤–∞–≥ —Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É\n`;
    });
    formatted += '\n';
  });

  return formatted;
}
