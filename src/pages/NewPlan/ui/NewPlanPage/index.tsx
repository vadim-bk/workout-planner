import { Sparkles, Eye, Save } from 'lucide-react';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { useNavigate } from 'react-router';
import { useGenerateWeightSuggestions } from '../../api/useGenerateWeightSuggestions';
import { useSaveAISuggestions } from '../../api/useSaveAISuggestions';
import { useSaveWorkoutPlan } from '../../api/useSaveWorkoutPlan';
import type { WeeklyPlan } from '@/types';
import { useAuth } from '@/contexts/AuthContext';
import { useWorkoutHistory } from '@/entities/workoutHistory';
import { parseWorkoutPlan } from '@/lib/parsers/workoutParser';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  Button,
  Textarea,
  Input,
  Alert,
  AlertDescription,
} from '@/shared/ui';

export const NewPlanPage = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const { register, getValues, formState } = useForm({
    mode: 'onChange',
    defaultValues: {
      weekStart: '',
      weekEnd: '',
      rawText: '',
    },
  });
  const [parsedPlan, setParsedPlan] = useState<WeeklyPlan | null>(null);
  const [error, setError] = useState<string | null>(null);

  const saveWorkoutPlan = useSaveWorkoutPlan();
  const saveAISuggestions = useSaveAISuggestions();
  const generateWeightSuggestions = useGenerateWeightSuggestions();
  const { data: workoutHistory = [] } = useWorkoutHistory(user?.uid);

  const handleParse = () => {
    const { rawText, weekStart, weekEnd } = getValues();
    if (!rawText || !weekStart || !weekEnd || !user) return;

    setError(null);
    const days = parseWorkoutPlan(rawText);

    if (days.length === 0) {
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø–ª–∞–Ω. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ç–µ–∫—Å—Ç –º—ñ—Å—Ç–∏—Ç—å "–î–µ–Ω—å 1", "–î–µ–Ω—å 2" —Ç–æ—â–æ.');
      return;
    }

    const plan: WeeklyPlan = {
      id: '',
      userId: user.uid,
      weekStartDate: new Date(weekStart),
      weekEndDate: new Date(weekEnd),
      days,
      rawText,
      createdAt: new Date(),
    };

    setParsedPlan(plan);
  };

  const handleSaveWithoutAI = () => {
    if (!parsedPlan || !user) return;
    setError(null);
    saveWorkoutPlan.mutate(parsedPlan, {
      onSuccess: () => {
        navigate('/');
      },
      onError: () => {
        setError('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–ª–∞–Ω—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Firebase.');
      },
    });
  };

  const handleSaveAndGenerateAI = () => {
    if (!parsedPlan || !user) return;
    setError(null);
    saveWorkoutPlan.mutate(parsedPlan, {
      onSuccess: (savedPlan) => {
        generateWeightSuggestions.mutate(
          { newPlan: savedPlan, workoutHistory },
          {
            onSuccess: (suggestionsMap) => {
              const suggestions = Array.from(suggestionsMap.values());
              saveAISuggestions.mutate(suggestions, {
                onSuccess: () => {
                  navigate('/');
                },
                onError: () => {
                  setError('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–ª–∞–Ω—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Firebase —Ç–∞ OpenAI API.');
                },
              });
            },
            onError: (err: unknown) => {
              const message = (err as { status?: number; message?: string }) || {};
              if (message.status === 429 || message.message?.includes('429') || message.message?.includes('quota')) {
                setError(
                  "‚ùå OpenAI Rate Limit: –£ –≤–∞—Å –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è –∫—Ä–µ–¥–∏—Ç–∏. –î–æ–¥–∞–π—Ç–µ –∫—Ä–µ–¥–∏—Ç–∏ –Ω–∞ platform.openai.com/settings/organization/billing –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–±–µ—Ä–µ–≥—Ç–∏ –±–µ–∑ AI' –Ω–∏–∂—á–µ."
                );
              } else if (message.message?.includes('OpenAI') || message.message?.includes('API')) {
                setError('‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI API. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–ª—é—á —É .env —Ñ–∞–π–ª—ñ –∞–±–æ –∑–±–µ—Ä–µ–∂—ñ—Ç—å –±–µ–∑ AI –ø—ñ–¥–∫–∞–∑–æ–∫.');
              } else {
                setError('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–ª–∞–Ω—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Firebase —Ç–∞ OpenAI API.');
              }
            },
          }
        );
      },
      onError: () => {
        setError('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–ª–∞–Ω—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Firebase.');
      },
    });
  };

  return (
    <div className="max-w-4xl mx-auto space-y-4 sm:space-y-6">
      <div>
        <h1 className="text-2xl sm:text-3xl font-bold">–ù–æ–≤–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å</h1>
        <p className="text-muted-foreground mt-1 text-sm sm:text-base">–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω—É –≤—ñ–¥ –≤–∞—à–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞</p>
      </div>

      {error && (
        <Alert variant="destructive">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <Card>
        <CardHeader>
          <CardTitle>–í–≤–µ–¥—ñ—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å</CardTitle>

          <CardDescription>–°–∫–æ–ø—ñ—é–π—Ç–µ —Ç–µ–∫—Å—Ç –∑ —Å–∞–π—Ç—É —Ç—Ä–µ–Ω–µ—Ä–∞ —Ç–∞ –≤—Å—Ç–∞–≤—Ç–µ –Ω–∏–∂—á–µ</CardDescription>
        </CardHeader>

        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-2 block">–ü–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω—è</label>

              <Input type="date" {...register('weekStart', { required: true })} />
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">–ö—ñ–Ω–µ—Ü—å —Ç–∏–∂–Ω—è</label>

              <Input type="date" {...register('weekEnd', { required: true })} />
            </div>
          </div>

          <div>
            <label className="text-sm font-medium mb-2 block">–¢–µ–∫—Å—Ç –ø–ª–∞–Ω—É</label>

            <Textarea
              {...register('rawText', { required: true })}
              placeholder="–î–µ–Ω—å 1&#10;&#10;1. –ë—Ä—É—Å–∏&#10;–ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –±–µ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—É –≤–∞–≥—É 3 –ø—ñ–¥—Ö–æ–¥—ñ–≤ –ø–æ 5-8 &#10;&#10;2. –¢—è–≥–∞ –æ–¥–Ω—ñ—î—ó –≥–∞–Ω—Ç–µ–ª—ñ –ø—ñ–¥ –Ω–∞—Ö–∏–ª–æ–º&#10;3 –ø—ñ–¥—Ö–æ–¥–∏ –ø–æ 6-10 &#10;..."
              className="min-h-[200px] sm:min-h-[300px] font-mono text-xs sm:text-sm"
            />
          </div>

          <div className="flex gap-2">
            <Button onClick={handleParse} disabled={!formState.isValid} variant="outline">
              <Eye className="mr-2 h-4 w-4" />
              –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–ª–∞–Ω
            </Button>
          </div>
        </CardContent>
      </Card>

      {parsedPlan && (
        <Card>
          <CardHeader>
            <CardTitle>–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π –ø–ª–∞–Ω</CardTitle>

            <CardDescription>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è</CardDescription>
          </CardHeader>

          <CardContent>
            <div className="space-y-4 sm:space-y-6">
              {parsedPlan.days.map((day) => (
                <div key={day.day} className="border rounded-lg p-3 sm:p-4">
                  <h3 className="font-bold text-base sm:text-lg mb-2 sm:mb-3">–î–µ–Ω—å {day.day}</h3>

                  <div className="space-y-2">
                    {day.exercises.map((ex, idx) => (
                      <div key={ex.id} className="flex items-start gap-2 text-xs sm:text-sm">
                        <span className="font-medium text-muted-foreground min-w-6">{idx + 1}.</span>

                        <div className="flex-1">
                          <p className="font-medium">{ex.name}</p>

                          <p className="text-muted-foreground">
                            {ex.sets} –ø—ñ–¥—Ö–æ–¥–∏ √ó {ex.reps}
                            {ex.type !== 'normal' && ex.type && (
                              <span className="ml-2 text-xs bg-primary/10 text-primary px-2 py-0.5 rounded">
                                {ex.type === 'superset' ? '–°—É–ø–µ—Ä—Å–µ—Ç' : '–î—Ä–æ–ø—Å–µ—Ç'}
                              </span>
                            )}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>

            <div className="mt-4 sm:mt-6 flex flex-col gap-3">
              <Button
                onClick={handleSaveAndGenerateAI}
                disabled={
                  generateWeightSuggestions.isPending || saveWorkoutPlan.isPending || saveAISuggestions.isPending
                }
                size="lg"
                className="w-full text-sm sm:text-base"
              >
                {generateWeightSuggestions.isPending || saveWorkoutPlan.isPending || saveAISuggestions.isPending ? (
                  <>
                    <div className="mr-2 h-4 w-4 animate-spin rounded-full border-b-2 border-white"></div>
                    <span className="hidden sm:inline">–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è AI –ø—ñ–¥–∫–∞–∑–æ–∫...</span>
                    <span className="sm:hidden">–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è...</span>
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" />
                    <span className="hidden sm:inline">–ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ AI –ø—ñ–¥–∫–∞–∑–∫–∏</span>
                    <span className="sm:hidden">–ó–±–µ—Ä–µ–≥—Ç–∏ –∑ AI</span>
                  </>
                )}
              </Button>

              <Button
                onClick={handleSaveWithoutAI}
                disabled={saveWorkoutPlan.isPending}
                size="lg"
                variant="outline"
                className="w-full text-sm sm:text-base"
              >
                <Save className="mr-2 h-4 w-4" />
                –ó–±–µ—Ä–µ–≥—Ç–∏ –±–µ–∑ AI –ø—ñ–¥–∫–∞–∑–æ–∫
              </Button>

              <p className="text-xs text-muted-foreground text-center">
                üí° –ü—ñ–¥–∫–∞–∑–∫–∞: AI –ø—ñ–¥–∫–∞–∑–∫–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ, –∞–±–æ –≤–≤–µ—Å—Ç–∏ –≤–∞–≥—É –≤—Ä—É—á–Ω—É
              </p>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};
